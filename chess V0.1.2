from binascii import a2b_base64
import time
from types import new_class

print("chess bott v1")
while True:
    ########################################################    board    ########################################################################################
    print("[T][F][S][Q][K][S][F][T]\n"
          "[B][B][B][B][B][B][B][B]\n"
          "[ ][ ][ ][ ][ ][ ][ ][ ]\n"
          "[ ][ ][ ][ ][ ][ ][ ][ ]\n"
          "[ ][ ][ ][ ][ ][ ][ ][ ]\n"
          "[ ][ ][ ][ ][ ][ ][ ][ ]\n"
          "[B][B][B][B][B][B][B][B]\n"
          "[T][F][S][Q][K][s][F][T]\n"
    )

    # piece value
    valuebauer = 1
    valuespringer = 3
    valuelaufer = 3
    valueturm = 5
    valuedame = 9
    valueKonig = 10

    # weiß placement start
    bep1 = "a2"
    bep2 = "b2"
    bep3 = "c2"
    bep4 = "d2"
    bep5 = "e2"
    bep6 = "f2"
    bep7 = "g2"
    bep8 = "h2"
    sep = "b1"
    szp = "g1"
    lep = "f1"
    lzp = "n1"
    tep = "a1"
    tzp = "h1"
    dep = "d1"
    kep = "e1"

    # schwarz placement
    sbep1 = "a7"
    sbep2 = "b7"
    sbep3 = "c7"
    sbep4 = "d7"
    sbep5 = "e7"
    sbep6 = "f7"
    sbep7 = "g7"
    sbep8 = "h7"
    ssep = "b8"
    sszp = "g8"
    slep = "f8"
    slzp = "n8"
    step = "a8"
    stzp = "h8"
    sdep = "d8"
    skep = "e8"

    # position change
    pieces_positions = {
        "bauer": [bep1, bep2, bep3, bep4, bep5, bep6, bep7, bep8],
        "springer": [sep, szp],
        "laufer": [lep, lzp],
        "turm": [tep, tzp],
        "dame": [dep],
        "konig": [kep]
    }

    # "en passant"-Ziel initialisieren
    en_passant_target = None

    # Benutzereingabe für Schachstück und Zug
    piename = input("Was für ein Schachstück? ")
    newpio = input("Was ist dein Zug? ")

    # List chess positions
    validposi = ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8",
                 "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8",
                 "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8",
                 "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8",
                 "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8",
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8",
                 "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8",
                 "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8"]

    ############################################# Pawn moves ################################################

    # Check if the move is valid and the piece exists
    if newpio not in validposi:
        print("Ungültiger Zug! Bitte gib eine gültige Schachposition ein.")
    elif piename not in pieces_positions:
        print("Ungültiges Schachstück! Bitte gib ein gültiges Schachstück ein.")
    else:
        # "en passant"
        if piename == "bauer" and abs(int(newpio[1]) - int(pieces_positions[piename][0][1])) == 2:
            en_passant_target = f"{newpio[0]}{int(newpio[1]) - 1}"

        # Perform "en passant" move if the target is set
        if en_passant_target and newpio == en_passant_target:
            pieces_positions["bauer"].remove(f"{newpio[0]}{int(newpio[1]) + 1}")

        # Perform normal pawn move
        elif piename == "bauer" and abs(int(newpio[1]) - int(pieces_positions[piename][0][1])) == 1:
            pieces_positions["bauer"] = [newpio]

        # Update the position of the piece based on the entered move
        else:
            pieces_positions[piename] = [newpio]

        print(f"{piename.capitalize()} befindet sich jetzt auf {newpio}.")

    ###################################### rock moves #################################################################

    if newpio not in validposi:
        print("Ungültiger Zug! Bitte gib eine gültige Schachposition ein.")
    elif piename not in pieces_positions:
        print("Ungültiges Schachstück! Bitte gib ein gültiges Schachstück ein.")

    if piename == "turm":
        if True:  # Add your condition here
            pieces_positions["turm"] = [newpio]
            print(f"Turm befindet sich jetzt auf {newpio}.")
        else:
            print("Ungültiger Turmzug! Bitte gib einen gültigen Zug ein.")
    else:
        print("Das ist kein Turm! Bitte gib einen Turm ein.")
        pieces_positions[piename] = [newpio]

        print(f"{piename.capitalize()} befindet sich jetzt auf {newpio}.")

    ################################################################ KING #####################################################################################

    if newpio not in validposi:
        print("Ungültiger Zug! Bitte gib eine gültige Schachposition ein.")
    
    elif piename not in pieces_positions:
        print("Ungültiges Schachstück! Bitte gib ein gültiges Schachstück ein.")

    if piename == "könig":
        if True:
            pieces_positions["konig"]  = [newpio]
            print(f"könig befindet sich jetzt auf {newpio}.")
        else:
            print("Ungültiger königszug! Bitte gib einen")

